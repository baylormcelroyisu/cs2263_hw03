/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package cs2263_hw03;

import com.google.gson.Gson;
import javafx.application.Application;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.paint.Color;
import javafx.stage.Stage;

import java.io.*;

/**
 *
 * An application to create and maintain a course catalog through a GUI.
 *
 */

public class App extends Application {

    private CourseProcessor copr = new CourseProcessor();
    //save file location
    private final String outputloc = "save.txt";

    /**
     * Handles the main scene of the GUI
     * @param stage the main stage
     * @throws Exception when there is a problem generating GUI
     */

    @Override
    public void start(Stage stage) throws Exception {
        stage.setTitle("Course Creator");

        Group root = new Group();
        Scene scene = new Scene(root, 450, 400);
        scene.setFill(Color.LIGHTGRAY);

        Button dispAll = new Button("Display (all)");
        Button dispDept = new Button("Display (dept.)");
        Button save = new Button("Save");
        Button load = new Button("Load");
        Button enter = new Button("Enter");
        Button exit = new Button("Quit");

        Label enterLabel = new Label("Add course");

        ComboBox<String> cb = new ComboBox<>();
        Label cbLabel = new Label("Department");

        TextField number = new TextField();
        TextField name = new TextField();
        TextField credits = new TextField();

        cb.setLayoutX(15);
        cb.setLayoutY(100);
        cb.getItems().addAll("Computer Science","Mathematics","Chemistry","Physics","Biology","Electrical Engineering");
        SingleSelectionModel selectionModel = cb.getSelectionModel();

        number.setLayoutX(180);
        number.setLayoutY(50);
        number.setPromptText("number");

        name.setLayoutX(180);
        name.setLayoutY(100);
        name.setPromptText("name");

        credits.setLayoutX(180);
        credits.setLayoutY(150);
        credits.setPromptText("credits");

        dispAll.setLayoutX(100);
        dispAll.setLayoutY(200);

        dispDept.setLayoutX(100);
        dispDept.setLayoutY(250);

        save.setLayoutX(300);
        save.setLayoutY(200);

        load.setLayoutX(300);
        load.setLayoutY(250);

        enter.setLayoutX(350);
        enter.setLayoutY(100);
        enter.setDefaultButton(true);

        exit.setLayoutX(350);
        exit.setLayoutY(25);
        exit.setCancelButton(true);

        enterLabel.setLayoutX(340);
        enterLabel.setLayoutY(80);

        cbLabel.setLayoutX(60);
        cbLabel.setLayoutY(70);

        enter.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            /**
             * Handles enter button being pressed. Adds a cours using info from text fields.
             */
            public void handle(ActionEvent event) {
                String num = number.getText();
                String n = name.getText();
                String cred = credits.getText();
                int index = selectionModel.getSelectedIndex();
                if (num  != "" && n  != "" && cred != "" && index != -1){
                    copr.addCourse(index,num,n,cred);
                    number.setText("");
                    name.setText("");
                    credits.setText("");
                }
                else{
                    successWin(false);
                }
            }
        });

        dispAll.setOnAction(new EventHandler<ActionEvent>() {
            /**
             * Handles display all button being pressed. Displays all courses.
             * @param event button press.
             */
            @Override
            public void handle(ActionEvent event) {
                dispWindow(copr.toString());
            }
        });

        dispDept.setOnAction(new EventHandler<ActionEvent>() {
            /**
             * Handles display department button being pressed. Displays courses by department.
             * @param event button press.
             */
            @Override
            public void handle(ActionEvent event) {
                int index = selectionModel.getSelectedIndex();
                if(index != -1){
                    dispWindow(copr.deptString(index));
                }
                else{
                    successWin(false);
                }
            }
        });

        save.setOnAction(new EventHandler<ActionEvent>() {
            /**
             * Handles save button being pressed. Saves file in json format.
             * @param event button press.
             */
            @Override
            public void handle(ActionEvent event) {
                FileWriter fw;

                try{
                    //create file if it doesnt exits
                    File outFile = new File(outputloc);
                    if(outFile.createNewFile()){
                        //tells user the file had to be created
                        System.out.println("File created: " + outFile.getName());
                    }
                    fw = new FileWriter(outputloc);
                    //create gson
                    Gson gson = new Gson();
                    String json = gson.toJson(copr);
                    //put json in file
                    fw.write("");
                    fw.write(json);
                    successWin(true);
                    fw.close();
                }
                catch(IOException e){
                    successWin(false);
                    e.printStackTrace();
                }
            }
        });

        load.setOnAction(new EventHandler<ActionEvent>() {
            /**
             * Handles load button being pressed. Loads save file using json.
             * @param event button press.
             */
            @Override
            public void handle(ActionEvent event) {

                Gson gson = new Gson();
                String json = "";
                //get from file
                try {
                    //create file if it doesnt exits
                    File outFile = new File(outputloc);
                    if(outFile.createNewFile()){
                        //tells user the file had to be created
                        System.out.println("File created: " + outFile.getName());
                    }
                    FileReader fr = new FileReader(outputloc);
                    BufferedReader br = new BufferedReader(fr);
                    String line;
                    //evaluate all lines of the input file
                    while ((line = br.readLine()) != null) {
                        json = json + line;
                    }
                    if(json != null){
                        copr = gson.fromJson(json, CourseProcessor.class);
                        successWin(true);
                    }
                    else {
                        successWin(false);
                    }
                    fr.close();
                }
                catch (IOException e){
                    e.printStackTrace();
                }
            }
        });

        exit.setOnAction(new EventHandler<ActionEvent>() {
            /**
             * Handles exit button being pressed. Creates confirmation window.
             * @param event button press.
             */
            @Override
            public void handle(ActionEvent event) {
                Stage quit = new Stage();
                quit.setTitle("Confirm");
                Group qroot = new Group();
                Scene qs = new Scene(qroot, 100,80);
                qs.setFill(Color.LIGHTGRAY);

                Button yes = new Button("Yes");
                Button no = new Button("no");
                Label confirm = new Label("Are you sure?");

                yes.setLayoutX(10);
                yes.setLayoutY(40);

                no.setLayoutX(60);
                no.setLayoutY(40);
                no.setDefaultButton(true);
                no.setCancelButton(true);

                confirm.setLayoutX(10);
                confirm.setLayoutY(10);

                yes.setOnAction(new EventHandler<ActionEvent>() {
                    /**
                     * Handles load button being pressed. Exits program.
                     * @param event button press.
                     */
                    @Override
                    public void handle(ActionEvent event) {
                      System.exit(0);
                    }
                });

                no.setOnAction(new EventHandler<ActionEvent>() {
                    /**
                     * Handles no button being pressed. Returns to main stage.
                     * @param event button press.
                     */
                    @Override
                    public void handle(ActionEvent event) {
                        quit.close();
                    }
                });

                qroot.getChildren().add(yes);
                qroot.getChildren().add(no);
                qroot.getChildren().add(confirm);

                quit.setResizable(false);
                quit.setScene(qs);
                quit.show();
            }
        });

        root.getChildren().add(cb);
        root.getChildren().add(cbLabel);
        root.getChildren().add(number);
        root.getChildren().add(name);
        root.getChildren().add(credits);
        root.getChildren().add(dispAll);
        root.getChildren().add(dispDept);
        root.getChildren().add(load);
        root.getChildren().add(save);
        root.getChildren().add(enter);
        root.getChildren().add(exit);
        root.getChildren().add(enterLabel);

        stage.setResizable(false);
        stage.setScene(scene);
        stage.show();
    }

    /**
     * Creates window to display current courses.
     * @param dispString courses to be displayed in String format
     */
    private void dispWindow(String dispString){
        Stage disp = new Stage();
        disp.setTitle("Courses");

        Group root = new Group();
        Scene scene = new Scene(root, 450, 400);
        scene.setFill(Color.LIGHTGRAY);

        TextArea ta = new TextArea();

        ta.setText(dispString);

        ta.setLayoutX(25);
        ta.setLayoutY(25);
        ta.setPrefSize(400, 350);

        root.getChildren().add(ta);

        disp.setResizable(false);
        disp.setScene(scene);
        disp.show();

    }

    /**
     * Creates window to give feedback on input. Displays success or failure of actions taken by user.
     * @param success success of attemted action.
     */
    private void successWin(boolean success){

        Stage sw = new Stage();
        sw.setTitle("Courses");

        Group root = new Group();
        Scene scene = new Scene(root, 100, 50);
        scene.setFill(Color.LIGHTGRAY);

        String complete = "";

        if(success){
            complete = "Success!";
        }
        else{
            complete = "Failure!";
        }

        Label label = new Label(complete);

        label.setLayoutX(10);
        label.setLayoutY(10);

        root.getChildren().add(label);

        sw.setResizable(false);
        sw.setScene(scene);
        sw.show();
    }

    /**
     * Main method. Runs Application
     * @param args
     */
    public static void main(String[] args) {
        Application.launch(args);
    }
}
